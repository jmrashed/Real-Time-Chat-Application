<%- include('layout') %>

    <% block content %>
        <div class="container mt-4">
            <h1 class="text-center">Real-Time Chat</h1>

            <div class="row">
                <div class="col-md-8 offset-md-2">
                    <!-- Chat Box -->
                    <div id="chat-box" class="mb-3">
                        <!-- Messages will be appended here -->
                    </div>

                    <!-- Message Input Form -->
                    <form id="message-form">
                        <div class="input-group">
                            <input type="text" id="message" class="form-control" placeholder="Enter your message"
                                required>
                            <div class="input-group-append">
                                <button type="submit" class="btn btn-primary">Send</button>
                            </div>
                        </div>
                    </form>

                    <!-- File Sharing Form -->
                    <form id="file-form" class="mt-3">
                        <div class="input-group">
                            <input type="file" id="file-input" class="form-control-file">
                            <div class="input-group-append">
                                <button type="submit" class="btn btn-secondary">Share File</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io();

            // Handle incoming messages
            socket.on('chatMessage', (data) => {
                const chatBox = document.getElementById('chat-box');
                const messageElement = document.createElement('div');
                messageElement.classList.add('message');
                messageElement.innerHTML = `<strong>${data.username}:</strong> ${data.message}`;
                chatBox.appendChild(messageElement);
                chatBox.scrollTop = chatBox.scrollHeight;
            });

            // Handle incoming files
            socket.on('fileMessage', (data) => {
                const chatBox = document.getElementById('chat-box');
                const fileElement = document.createElement('div');
                fileElement.classList.add('message');
                fileElement.innerHTML = `<strong>${data.username}:</strong> <a href="${data.fileUrl}" download>${data.fileName}</a>`;
                chatBox.appendChild(fileElement);
                chatBox.scrollTop = chatBox.scrollHeight;
            });

            // Handle message form submission
            document.getElementById('message-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const messageInput = document.getElementById('message');
                const message = messageInput.value;
                socket.emit('sendMessage', { message });
                messageInput.value = '';
            });

            // Handle file form submission
            document.getElementById('file-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const fileInput = document.getElementById('file-input');
                const file = fileInput.files[0];

                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const fileData = e.target.result;
                        socket.emit('sendFile', { fileName: file.name, fileData });
                    };
                    reader.readAsArrayBuffer(file);
                }
            });
        </script>
        <% endblock %>